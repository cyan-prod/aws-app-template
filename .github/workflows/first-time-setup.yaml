name: First Time Repository Setup

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  setup-repository:
    name: Apply governance rules to this repository
    runs-on: ubuntu-latest
    # Only run if setup marker doesn't exist
    if: "!contains(github.event.head_commit.message, '[skip setup]')"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check if setup already completed
        id: check-setup
        continue-on-error: true
        run: |
          if [ -f ".github/.setup-complete" ]; then
            echo "setup_done=true" >> $GITHUB_OUTPUT
            echo "✓ Setup already completed, skipping..."
          else
            echo "setup_done=false" >> $GITHUB_OUTPUT
            echo "First time setup needed"
          fi

      - name: Validate repository naming convention
        if: steps.check-setup.outputs.setup_done == 'false'
        id: validate-name
        uses: actions/github-script@v8
        with:
          script: |
            const repoName = context.repo.repo;
            const namePattern = /^aws-[a-z0-9]+(-[a-z0-9]+)*$/;

            console.log(`Validating repository name: ${repoName}`);

            if (!namePattern.test(repoName)) {
              console.log('❌ Repository name does NOT follow convention');

              let issues = [];

              if (!repoName.startsWith('aws-')) {
                issues.push('Must start with "aws-"');
              }

              if (repoName !== repoName.toLowerCase()) {
                issues.push('Must be all lowercase');
              }

              if (repoName.includes('_')) {
                issues.push('Use hyphens (-) not underscores (_)');
              }

              const suggestion = repoName
                .toLowerCase()
                .replace(/[_\s]+/g, '-')
                .replace(/^(?!aws-)/, 'aws-');

              core.setOutput('valid', 'false');
              core.setOutput('issues', issues.join('; '));
              core.setOutput('suggestion', suggestion);
            } else {
              console.log('✓ Repository name follows convention');
              core.setOutput('valid', 'true');
            }

      - name: Apply repository rulesets
        if: steps.check-setup.outputs.setup_done == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            const path = require('path');

            console.log(`\nApplying rulesets to ${context.repo.owner}/${context.repo.repo}...\n`);

            const rulesetDir = 'rulesets';

            // Check if rulesets directory exists
            if (!fs.existsSync(rulesetDir)) {
              console.log('⚠️ Rulesets directory not found - skipping ruleset application');
              return [];
            }

            const rulesetFiles = fs.readdirSync(rulesetDir)
              .filter(file => file.endsWith('.json'));

            const results = [];

            for (const file of rulesetFiles) {
              const filePath = path.join(rulesetDir, file);
              const rulesetConfig = JSON.parse(fs.readFileSync(filePath, 'utf8'));

              console.log(`Processing: ${file} - ${rulesetConfig.name}`);

              try {
                const response = await github.rest.repos.createRepoRuleset({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ...rulesetConfig
                });

                console.log(`✓ Applied: ${rulesetConfig.name} (ID: ${response.data.id})`);
                results.push({ file, status: 'success', name: rulesetConfig.name });
              } catch (error) {
                console.error(`✗ Failed: ${rulesetConfig.name} - ${error.message}`);
                results.push({ file, status: 'failed', name: rulesetConfig.name, error: error.message });
              }
            }

            const successCount = results.filter(r => r.status === 'success').length;
            const failCount = results.filter(r => r.status === 'failed').length;

            console.log(`\n=== Summary ===`);
            console.log(`Total: ${results.length} | Success: ${successCount} | Failed: ${failCount}`);

            return results;

      - name: Clean up template files
        if: steps.check-setup.outputs.setup_done == 'false'
        run: |
          echo "Cleaning up template-specific files..."

          # Remove template governance files
          rm -rf rulesets/
          rm -f .github/workflows/fork-governance.yaml
          rm -f .github/workflows/apply-rulesets.yaml
          rm -f .github/workflows/first-time-setup.yaml

          echo "✓ Cleaned up template files"

      - name: Create dev branch and set as default
        if: steps.check-setup.outputs.setup_done == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            try {
              // Check if dev branch exists
              await github.rest.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'dev'
              });
              console.log('Dev branch already exists');
            } catch (error) {
              if (error.status === 404) {
                console.log('Creating dev branch from main...');

                // Get main branch ref
                const mainBranch = await github.rest.repos.getBranch({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  branch: 'main'
                });

                // Create dev branch from main
                await github.rest.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'refs/heads/dev',
                  sha: mainBranch.data.commit.sha
                });

                console.log('✓ Dev branch created');
              } else {
                throw error;
              }
            }

            // Set dev as default branch
            try {
              await github.rest.repos.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                default_branch: 'dev'
              });
              console.log('✓ Set dev as default branch');
            } catch (error) {
              console.error('Failed to set default branch:', error.message);
            }

      - name: Create environments
        if: steps.check-setup.outputs.setup_done == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            const environments = ['dev', 'staging', 'prod'];

            for (const env of environments) {
              try {
                await github.rest.repos.createOrUpdateEnvironment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  environment_name: env
                });
                console.log(`✓ Created environment: ${env}`);
              } catch (error) {
                console.error(`Failed to create ${env}:`, error.message);
              }
            }

      - name: Enable security features
        if: steps.check-setup.outputs.setup_done == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            // Enable vulnerability alerts
            try {
              await github.rest.repos.enableVulnerabilityAlerts({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              console.log('✓ Enabled vulnerability alerts');
            } catch (error) {
              console.error('Failed to enable vulnerability alerts:', error.message);
            }

            // Enable automated security fixes (Dependabot)
            try {
              await github.rest.repos.enableAutomatedSecurityFixes({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              console.log('✓ Enabled Dependabot security updates');
            } catch (error) {
              console.error('Failed to enable Dependabot:', error.message);
            }

            // Enable auto-delete head branches
            try {
              await github.rest.repos.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                delete_branch_on_merge: true
              });
              console.log('✓ Enabled auto-delete branch after merge');
            } catch (error) {
              console.error('Failed to enable auto-delete:', error.message);
            }

      - name: Create setup complete marker and commit cleanup
        if: steps.check-setup.outputs.setup_done == 'false'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

          # Create marker file
          mkdir -p .github
          echo "$(date -u)" > .github/.setup-complete

          git add -A
          git commit -m "chore: complete first-time setup and remove template files [skip setup]" || echo "Nothing to commit"
          git push origin main

      - name: Create setup summary issue
        if: steps.check-setup.outputs.setup_done == 'false'
        uses: actions/github-script@v8
        with:
          script: |
            const nameValid = '${{ steps.validate-name.outputs.valid }}';
            const nameIssues = '${{ steps.validate-name.outputs.issues }}';
            const nameSuggestion = '${{ steps.validate-name.outputs.suggestion }}';

            let body = `# 🎉 Repository Setup Complete\n\n`;
            body += `This repository was created from the AWS app template and has been automatically configured.\n\n`;

            // Naming validation
            body += `## 📝 Repository Naming\n\n`;
            if (nameValid === 'true') {
              body += `✅ **Repository name follows convention**: \`${context.repo.repo}\`\n\n`;
            } else {
              body += `⚠️ **Repository name does NOT follow convention**\n\n`;
              body += `**Current name:** \`${context.repo.repo}\`\n`;
              body += `**Issues:** ${nameIssues}\n`;
              body += `**Suggested name:** \`${nameSuggestion}\`\n\n`;
            }

            // Applied rules
            body += `## 🔒 Applied Governance Rules\n\n`;
            body += `- ✅ Repository rulesets applied\n`;
            body += `- ✅ Branch protection for \`main\` and \`dev\`\n`;
            body += `- ✅ Tag protection for \`v*\` tags\n`;
            body += `- ✅ Branch naming convention enforced\n`;
            body += `- ✅ Commit message convention enforced\n`;
            body += `- ✅ Dev branch created and set as default\n`;
            body += `- ✅ Environments created (dev, staging, prod)\n`;
            body += `- ✅ Security features enabled\n`;
            body += `- ✅ Template files cleaned up\n\n`;

            body += `## 🚀 Next Steps\n\n`;
            body += `1. Update README.md with your project details\n`;
            body += `2. Create required workflow files for status checks\n`;
            body += `3. Configure environment secrets\n`;
            body += `4. Start developing on the \`dev\` branch\n\n`;

            body += `For more information, see [CONTRIBUTING.md](./CONTRIBUTING.md)\n`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: nameValid === 'true'
                ? '✅ Repository Setup Complete'
                : '⚠️ Repository Setup Complete - Action Required',
              body: body,
              labels: nameValid === 'true' ? ['setup'] : ['setup', 'action-required']
            });
